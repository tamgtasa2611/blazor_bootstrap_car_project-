@page "/car/edit/{Id:int}"
@using BlazorBootstrap_Car.Data
@using MySql.Data.MySqlClient;
@using BlazorBootstrap

<h3 class="mb-3">Edit Car: @car.Name - #@car.Id</h3>

<EditForm Model="car" OnValidSubmit="UpdateCar">
    <DataAnnotationsValidator />
    <div class="row g-3">
        <div class="col-6">
            <div class="form-group row mb-3">
                <div class="col-md-10">
                    <label for="Name" class="form-label">Car Name</label>
                    <InputText @bind-Value=car.Name class="form-control" />
                    <div class="text-danger">
                        <ValidationMessage For="() => car.Name" />
                    </div>
                </div>
            </div>

            <div class="form-group row mb-3">
                <div class="col-md-10">
                    <label for="Quantity" class="form-label">Quantity</label>
                    <InputNumber @bind-Value=car.Quantity class="form-control" />
                    <div class="text-danger">
                        <ValidationMessage For="() => car.Quantity" />
                    </div>
                </div>
            </div>

            <div class="form-group row mb-3">
                <div class="col-md-10">
                    <label for="Price" class="form-label">Price</label>
                    <InputNumber @bind-Value=car.Price class="form-control" />
                    <div class="text-danger">
                        <ValidationMessage For="() => car.Price" />
                    </div>
                </div>
            </div>

            <div class="form-group row mb-3">
                <div class="col-md-10">
                    <label for="Brand" class="form-label">Brand</label>
                    <InputSelect @bind-Value=car.BrandId class="form-select" id="SelectBrand">
                        <option value="0" selected>-- Choose a brand --</option>
                        @foreach (var br in brands)
                        {
                            <option value="@br.Id" selected="@(car.BrandId == br.Id)">@br.Name</option>
                        }
                    </InputSelect>
                   
                    <div class="text-danger">
                        <ValidationMessage For="() => car.BrandId" />
                    </div>
                </div>
            </div>
        </div>
        <div class="col-6">
            <div class="form-group row mb-3">
                <div class="col-md-10">
                    <label for="IsDeleted" class="form-label">Is deleted</label>
                    <InputSelect @bind-Value=car.IsDeleted class="form-select" id="SelectIsDeleted">
                        <option value="0" selected="@(car.IsDeleted == 0)">No</option>
                        <option value="1" selected="@(car.IsDeleted == 1)">Deleted</option>
                    </InputSelect>
                    <div class="text-danger">
                        <ValidationMessage For="() => car.IsDeleted" />
                    </div>
                </div>
            </div>
            <div class="form-group row mb-3">
                <div class="col-md-10">
                    <label for="Image" class="form-label">Image</label>
                    <InputFile OnChange="HandleFileSelected" @bind-Value=car.Image class="form-control" />
                    @if (ImageDataUrl != null)
                    {
                        <img src="@ImageDataUrl" class="mt-3" style="max-width: 500px" />
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-12">
            <div class="d-flex">
                <a href="/car" class="btn btn-secondary me-3 rounded-5"><Icon Name="IconName.ArrowLeftCircle" /> Back</a>
                <button type="submit" class="btn btn-primary rounded-5"><Icon Name="IconName.ArrowUpCircle" /> Update</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }
    [Inject]
    private NavigationManager? NavigationManager { get; set; }

    Car car = new Car();
    List<Brand> brands = new List<Brand>();

    private string ImageDataUrl = "";
    private IBrowserFile selectedFile;

    protected override void OnParametersSet()
    {
        if (Id != 0)
        {
            car = GetCar(Id);
            GetBrands();
        }
    }

    public Car GetCar(int Id)
    {
        var conn = DBMySQL.GetMySqlConnection();
        try
        {
            conn.Open();
            string sqlGetCar = $"SELECT * FROM cars WHERE id = {Id}";
            MySqlCommand cmd = conn.CreateCommand();
            cmd.CommandText = sqlGetCar;
            MySqlDataReader mySqlDataReader = cmd.ExecuteReader();
            if (mySqlDataReader.Read())
            {
                car.Id = mySqlDataReader.GetInt32("id");
                car.Name = mySqlDataReader.GetString("name");
                car.Quantity = mySqlDataReader.GetInt32("quantity");
                car.Price = mySqlDataReader.GetFloat("price");
                car.BrandId = mySqlDataReader.GetInt32("brand_id");
                car.Image = mySqlDataReader.GetString("image");
                car.IsDeleted = mySqlDataReader.GetInt32("is_deleted");

                ImageDataUrl = car.Image;
            }

            conn.Close();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
        return car;
    }

    public void GetBrands()
    {
        var conn = DBMySQL.GetMySqlConnection();
        try
        {
            conn.Open();
            string sqlGetBrands = "SELECT * FROM brands";
            MySqlCommand cmd = conn.CreateCommand();
            cmd.CommandText = sqlGetBrands;
            MySqlDataReader mySqlDataReader = cmd.ExecuteReader();
            while (mySqlDataReader.Read())
            {
                Brand br = new Brand();
                br.Id = mySqlDataReader.GetInt32("id");
                br.Name = mySqlDataReader.GetString("name");
                br.IsDeleted = mySqlDataReader.GetInt32("is_deleted");
                brands.Add(br);
            }

            conn.Close();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

        foreach(var br in brands)
        {
            Console.WriteLine(br.Name);
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        var resizeFile = await e.File.RequestImageFileAsync("image/jpeg", 500, 500);
        var buffer = new byte[resizeFile.Size];
        await resizeFile.OpenReadStream().ReadAsync(buffer);
        ImageDataUrl = $"data:image/jpeg;base64,{Convert.ToBase64String(buffer)}";
    }

    private async Task SaveImageToServer(IBrowserFile file)
    {
        if (file != null)
        {
            var FileName = file.Name;
            var folderPath = Path.Combine("wwwroot", "uploads"); //wwwroot/uploads
            var filePath = Path.Combine(folderPath, FileName); //wwwroot/uploads/...
            Directory.CreateDirectory(folderPath);
            using (var fileStream = new FileStream(filePath, FileMode.Create))
            {
                await file.OpenReadStream().CopyToAsync(fileStream);
            }
            car.Image = $"uploads/{FileName}";
        }
    }

    protected async void UpdateCar()
    {
        await SaveImageToServer(selectedFile);
        string Name = car.Name;
        int Quantity = car.Quantity;
        float Price = car.Price;
        int BrandId = car.BrandId;
        string Image = car.Image;
        int IsDeleted = car.IsDeleted;
        string SqlUpdate = $"UPDATE cars SET name = '{Name}', quantity = {Quantity}, price = {Price}, brand_id = {BrandId}, image = '{Image}', is_deleted = {IsDeleted} WHERE id = {Id}";
        MySqlConnection conn = DBMySQL.GetMySqlConnection();
        conn.Open();
        MySqlCommand cmd = new MySqlCommand(SqlUpdate, conn);
        cmd.ExecuteNonQuery();
        conn.Close();
        NavigationManager.NavigateTo("/car", forceLoad: true);
    }
}
